// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: register.sql

package repository

import (
	"context"
	"myStandardModel/models"
)

const getRegistrationsByEventID = `-- name: GetRegistrationsByEventID :many
SELECT id, userid, eventid FROM register WHERE eventid = $1
`

func (q *Queries) GetRegistrationsByEventID(ctx context.Context, eventid int32) ([]Register, error) {
	rows, err := q.db.QueryContext(ctx, getRegistrationsByEventID, eventid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Register
	for rows.Next() {
		var i Register
		if err := rows.Scan(&i.ID, &i.Userid, &i.Eventid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRegistrationsByUserID = `-- name: GetRegistrationsByUserID :many
SELECT id, userid, eventid FROM register WHERE userid = $1
`

func (q *Queries) GetRegistrationsByUserID(ctx context.Context, userid int32) ([]Register, error) {
	rows, err := q.db.QueryContext(ctx, getRegistrationsByUserID, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Register
	for rows.Next() {
		var i Register
		if err := rows.Scan(&i.ID, &i.Userid, &i.Eventid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerUserForEvent = `-- name: RegisterUserForEvent :one
INSERT INTO register (userId, eventid)
VALUES ($1, $2)
RETURNING id, userid, eventid
`

type RegisterUserForEventParams struct {
	Userid  int32
	Eventid int32
}

func (q *Queries) RegisterUserForEvent(ctx context.Context, arg RegisterUserForEventParams) (Register, error) {
	row := q.db.QueryRowContext(ctx, registerUserForEvent, arg.Userid, arg.Eventid)
	var i Register
	err := row.Scan(&i.ID, &i.Userid, &i.Eventid)
	return i, err
}
