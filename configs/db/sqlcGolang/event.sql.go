// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: event.sql

package db

import (
	"context"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (name, description, location, "userId")
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, location, datatimecreating, "userId", datetimeupdating
`

type CreateEventParams struct {
	Name        string
	Description string
	Location    string
	UserId      int32
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.Name,
		arg.Description,
		arg.Location,
		arg.UserId,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Location,
		&i.Datatimecreating,
		&i.UserId,
		&i.Datetimeupdating,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, id)
	return err
}

const getEventByID = `-- name: GetEventByID :one
SELECT id, name, description, location, datatimecreating, "userId", datetimeupdating FROM events WHERE id = $1
`

func (q *Queries) GetEventByID(ctx context.Context, id int64) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEventByID, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Location,
		&i.Datatimecreating,
		&i.UserId,
		&i.Datetimeupdating,
	)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, name, description, location, datatimecreating, "userId", datetimeupdating FROM events ORDER BY datatimecreating DESC
`

func (q *Queries) ListEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Location,
			&i.Datatimecreating,
			&i.UserId,
			&i.Datetimeupdating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events 
SET name = $2, description = $3, location = $4, datetimeupdating = now()
WHERE id = $1
RETURNING id, name, description, location, datatimecreating, "userId", datetimeupdating
`

type UpdateEventParams struct {
	ID          int64
	Name        string
	Description string
	Location    string
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, updateEvent,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Location,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Location,
		&i.Datatimecreating,
		&i.UserId,
		&i.Datetimeupdating,
	)
	return i, err
}
